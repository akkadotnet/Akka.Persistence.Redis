akka.persistence {
  journal {
    redis {
      # qualified type name of the Redis persistence journal actor
      class = "Akka.Persistence.Redis.Journal.RedisJournal, Akka.Persistence.Redis"

      # connection string, as described here: https://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md#basic-configuration-strings
      configuration-string = ""

      # dispatcher used to drive journal actor
      plugin-dispatcher = "akka.actor.default-dispatcher"

      # Redis journals key prefixes. Leave it for default or change it to appropriate value. 
      # WARNING: don't change it on production instances.
      key-prefix = ""
    }
  }  

  snapshot-store {
    redis {
      # qualified type name of the Redis persistence snapshot storage actor
      class = "Akka.Persistence.Redis.Snapshot.RedisSnapshotStore, Akka.Persistence.Redis"

      # connection string, as described here: https://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md#basic-configuration-strings
      configuration-string = ""
      # Set the Redis default database to use. If you added `defaultDatabase` to the `connection-string`, you have to set `database` to the value of `defaultDatabase`.
      database = 0
      # dispatcher used to drive snapshot storage actor
      plugin-dispatcher = "akka.actor.default-dispatcher"

      key-prefix = ""
    }
  }
}

akka.persistence.query.journal.redis {
  # Implementation class of the Redis ReadJournalProvider
  class = "Akka.Persistence.Redis.Query.RedisReadJournalProvider, Akka.Persistence.Redis"
  
  # Absolute path to the write journal plugin configuration entry that this 
  # query journal will connect to. 
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""
  
  # The SQL write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events 
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s
  
  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100
}

akka.actor {
    serializers {
        persistence-snapshot = "Akka.Persistence.Redis.Serialization.PersistentSnapshotSerializer, Akka.Persistence.Redis"
    }
    serialization-bindings {
        "Akka.Persistence.SelectedSnapshot, Akka.Persistence" = persistence-snapshot
    }
    serialization-identifiers {
        "Akka.Persistence.Redis.Serialization.PersistentSnapshotSerializer, Akka.Persistence.Redis" = 48
    }
}